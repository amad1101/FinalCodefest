{"remainingRequest":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/src/views/Simulation.vue?vue&type=style&index=0&id=b5fc077e&lang=scss&scoped=true&","dependencies":[{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/src/views/Simulation.vue","mtime":1557054072409},{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/css-loader/index.js","mtime":1557053159508},{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1557053166141},{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/postcss-loader/src/index.js","mtime":1557053162685},{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/sass-loader/lib/loader.js","mtime":1557053164862},{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/cache-loader/dist/cjs.js","mtime":1557053158463},{"path":"/Users/Diallo/Documents/GitHub/FinalCodefest/CodefestRob/node_modules/vue-loader/lib/index.js","mtime":1557053166141}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nimg {\n  max-width: 85%;\n  height: auto;\n  padding-top: 1.5rem;\n}\na{\n  color: #52ae8c;\n  text-decoration: underline;\n}\na:hover {\n  color: #ffffff;\n  -webkit-transition: all 0.2s ease-in-out;\n  -moz-transition: all 0.2s ease-in-out;\n  -o-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n}\niframe {\n  width: 75%;\n  height: 50rem;\n}\n",{"version":3,"sources":["Simulation.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Simulation.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div class=\"simulation\">\n    <!-- <h1>Simulation</h1>\n    <h2>The live DEMO with go here.</h2>\n\n    <ul>\n      <li v-for=\"(todo, index) in todos\" :key=\"index\">\n        <input @click=\"toggleTodoDone(index)\" type=\"checkbox\" :checked=\"todo.done\">\n        <span :class=\"{ done: todo.done }\">{{todo.title}}</span>\n      </li>\n    </ul> -->\n    <Situation :context='job[0].Situation' ></Situation>\n    <br>\n    <br>\n    <br>\n    <b-container >\n      <b-row class=\"mb-3\">\n        <!-- <b-col md=\"4\"> -->\n          <Choice v-for=\"(number, index) in job\" :key=\"index\" :context='number.name' :propA='number.type' :propB='number.cost' :propC='number.distance' :propD='number.method' :propE='number.choiceName' :propF='number.link'></Choice>\n        <!-- </b-col> -->\n      </b-row>\n   </b-container>\n   <!-- <p v-for='(number, index) in job' :key=\"index\">{{number.name}}</p> -->\n   <!-- Format job[0].choice[0].choice -->\n    <!-- <ul> -->\n    <!-- <p>{{ tracker }}</p> -->\n\n      <!-- <li v-for=\"(job, index) in job\" :key=\"index\"> -->\n        <!-- <input @click=\"toggleTodoDone(index)\" type=\"checkbox\" :checked=\"todo.done\"> -->\n        <!-- <p v-for=\"(number, index) in job\" :key=\"index\">{{number.name}}</p> -->\n      <!-- </li> -->\n    <!-- </ul> -->\n\n\n\n\n\n\n  </div>\n</template>\n\n<style lang=\"scss\" scoped>\nimg {\n  max-width: 85%;\n  height: auto;\n  padding-top: 1.5rem;\n}\na{\n  color: #52ae8c;\n  text-decoration: underline;\n}\na:hover {\n  color: #ffffff;\n  -webkit-transition: all 0.2s ease-in-out;\n  -moz-transition: all 0.2s ease-in-out;\n  -o-transition: all 0.2s ease-in-out;\n  transition: all 0.2s ease-in-out;\n}\niframe {\n  width: 75%;\n  height: 50rem;\n}\n</style>\n\n<script>\nimport { mapState, mapMutations, mapActions } from 'vuex';\nimport Choice from '@/components/Choice.vue';\nimport Situation from '@/components/Situation.vue';\n\nexport default {\n  name: 'simulation',\n  components: {\n    Choice,\n    Situation\n  },\n  // data: function () {\n  //   return {\n  //     job2:\n  //   }},\n  computed: {\n    // test() {\n    //   return this.$store.state.job\n    //   return this.$store.state.job\n\n    // },\n    newTodo: {\n      // get() {\n      //   // return this.$store.state.job\n      //   return this.job2 = this.job\n      //\n      //          // this.$store.state.tracker;\n      // }\n      // set(value) {\n      //   this.$store.commit('setNewTodo', value);\n      // }\n    },\n    ...mapState(['job', 'tracker'])\n  },\n  methods: {\n    ...mapMutations(['allDone', 'getData']),\n    ...mapActions(['updateTracker', 'returnUpdatedData' ])\n  }\n}</script>\n"]}]}